#!/home/goldberg/.venv/bin/python

import sys
import colorgram

from pathlib import Path
from PIL import ImageColor

class ExtractColors:
    """
        Extract 18 colors from the image.
    """
    # path to the image
    image : Path

    # lists containing colors in rgb and hex format
    colors_rgb : list[tuple] = []
    colors_hex : list[str] = []

    def __init__(self, image : Path) -> None:
        self.image = image
        self.__extract_colors()

    @staticmethod
    def __rgb_to_hex(rgb : tuple[int, int, int]):
        """
            Convert rgb tuple into hex string.

            :param rgb tuple
            :return hex string
        """
        return "#{:02x}{:02x}{:02x}".format(rgb[0], rgb[1], rgb[2])

    def __extract_colors(self):
        """
            Extract 18 most common colors from the image.
        """
        print(f'[...] extracting colors from {self.image}...')
        extracted_colors = colorgram.extract(self.image, 17)
        print(f'[!!!] colors extracted.')
        for color in extracted_colors:
            self.colors_rgb.append(( color.rgb[0], color.rgb[1], color.rgb[2]))
            self.colors_hex.append(ExtractColors.__rgb_to_hex(
                                                        color.rgb))

class ParseColors:
    """
        Parse colors lists into dictionary with key being
        name of the colors and value the color itself.

        eg. { background : #ffffff }
    """
    # path to the image
    image : Path

    # color extractor
    extract_color : ExtractColors

    # color dictionaries
    color_entries_hex : dict[str, str]
    color_entries_rgb : dict[str, tuple[int, int, int]]


    def __init__(self, image) -> None:
        self. image = image
        extract_colors = ExtractColors(self.image)
        self.__parse_colors(extract_colors.colors_hex)
        self.__parse_colors(extract_colors.colors_rgb)

    def __parse_rgb(self, colors : list):
        """
            Parses RGB colors into dictionary.
        """
        self.color_entries_rgb = { 'background' : colors[0],
                                   'foreground' : colors[3],
                                   'cursor'     : colors[3],
                                   'color0'     : colors[0],
                                   'color1'     : colors[1],
                                   'color2'     : colors[2] }
        # filling colors3-15
        for i in range(4, 17):
            color_number='color' + str(i - 1)
            self.color_entries_rgb[color_number] = colors[i]

    def __parse_hex(self, colors : list):
        """
            Parses RGB colors into dictionary.
        """
        self.color_entries_hex = { 'background' : colors[0],
                                   'foreground' : colors[3],
                                   'cursor'     : colors[3],
                                   'color0'     : colors[0],
                                   'color1'     : colors[1],
                                   'color2'     : colors[2] }
        # filling colors3-15
        for i in range(4, 17):
            color_number='color' + str(i - 1)
            self.color_entries_hex[color_number] = colors[i]


    def __parse_colors(self, colors : list):
        """
            Parses generated_colors into 3 special colors and 15 basic ones,
            defining how terminal and programs within it look.
        """
        if type(colors[0]) is tuple:
            self.__parse_rgb(colors)
        else:
            self.__parse_hex(colors)

class Visualise:
    """
        Display generated colors and configs along with both names
        and colors
    """
    @staticmethod
    def __gen_colored_output(rgb : tuple[int, int, int]):
        """
            Generates colored string - four spaces with background
            in desired color.
        """
        color_code = f"\033[48;2;{rgb[0]};{rgb[1]};{rgb[2]}m" 
        reset_code = "\033[0m" 
        return f'{color_code}    {reset_code}'

    @staticmethod
    def __print_entry(id : str, rgb : tuple[int, int, int]):
        print('{:<12}{:<12}'.format(id, Visualise.__gen_colored_output(rgb)))

    @staticmethod
    def display_dict(rgb_colors : dict[str, tuple[int, int, int]]):
        print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')
        for id, rgb in rgb_colors.items():
            Visualise.__print_entry(id, rgb)
        print('~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~')


class Writer:
    """
        Writes desired colors to files in appropriate fashion.
    """

    def __init__(self, parsed_colors : ParseColors) -> None:
        self.parsed_colors = parsed_colors

    def __kitty_config(self):
        """
            Generate kitty config in $HOME/.config/kitty/colors/
            colors-kitty-<image_name>.conf.
        """
        # name of the provided picture
        image_name = self.parsed_colors.image.stem

        # name of the generated config file
        config_name = 'colors-kitty-' + image_name + '.conf'

        # path to the new configuration file
        config_path = Path.joinpath(
            Path.home(),
            '.config',
            'kitty',
            'colors',
            str(config_name)
        )

        print(f'[...] writing generated config...')

        with open(config_path, 'w') as kitty_colors:
            for k,v in self.parsed_colors.color_entries_hex.items():
                kitty_colors.write('{:<12}{:<12}'.format(k, v) + '\n')

        print(f'[!!!] config written to {config_path}.')

    def __css_style(self):
        """
            Generate css file $HOME/.config/eww/styles/colors-<image-name>.scss
            containing generated colors.
        """
        # name of the provided picture
        image_name = self.parsed_colors.image.stem

        # name of the generated config file
        css_name ='colors-' + image_name + '.scss'

        # path to the new configuration file
        css_path = Path.joinpath(
            Path.home(),
            '.config',
            'eww',
            'styles',
            str(css_name)
        )

        print(f'[...] writing generated colors as {css_name}...')

        with open(css_path, 'w') as css_colors:
            for k,v in self.parsed_colors.color_entries_hex.items():
                css_colors.write('${:<12} : {:<7}'.format(k, v) + '\n')

        print(f'[!!!] colors written to {css_path}.')


class Reader:
    """
        Allows to read the colors from existing files and display
        them in color.
    """

    def __init__(self, parsed_colors : ParseColors) -> None:
        self.parsed_colors = parsed_colors


class Colorscheme:
    parsecolors : ParseColors

    def generate_colors(self):
        self.parsecolors = ParseColors(sys.argv[1])
        Visualise.display_dict(self.parsecolors.color_entries_rgb)

if __name__ == "__main__":
    colorscheme = Colorscheme()
    colorscheme.generate_colors()


def __remove_redundant_splits(split, output):
    for s in split:
        if s != '':
            output.append(s)
    return output

def __clean_split_list(split):
    cleaned_split = []
    cleaned_split = __remove_redundant_splits(split, cleaned_split)
    cleaned_split[1] = cleaned_split[1].replace('\n', '')
    return cleaned_split

def __retrieve_data(line, conf):
    """
        Splipts the line of the config file by space, removes empty elements
        and newline sequences.
    """
    split_line = line.split(' ')
    clear_split = __clean_split_list(split_line)
    conf[clear_split[0]] = clear_split[1]

def __display_configuration(conf):
    for k, v in conf.items():
        print_opt(k, v)

def list_colors():
    """
        In case user modifier the config manually, script reads the colors 
        directly from given file on the drive after the parameter -l.
    """
    # config from the drive
    conf = Path(sys.argv[2])

    # retrieved data
    retrieved_conf = {}

    # reading data and properly parsing it into dictionary
    with open(conf, 'r') as kitty_colors:
        for line in kitty_colors:
            __retrieve_data(line, retrieved_conf)

    __display_configuration(retrieved_conf)

# if __name__ == "__main__":
#     if sys.argv[1] == '-g':
#         extract_colors()
#     elif sys.argv[1] == '-l':
#         list_colors()
#     elif sys.argv[1] == '-c':
#         list_colors()
#     else:
#         print('usage: extract-colors [[-g] | [-l]] [file]')
#         print('\t-g [file] generates most abundant colors in the given file (image) and writes them into kitty config (as a separate file).')
#         print('\t-l [file] parses given color configuration for kitty terminal, and displays both the names and corresponding hue.')
